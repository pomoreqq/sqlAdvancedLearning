-- ğŸ§© T1: "Najbardziej aktywni aktorzy"

-- PokaÅ¼ 10 aktorÃ³w, ktÃ³rzy zagrali w najwiÄ™kszej liczbie filmÃ³w.
-- ZwrÃ³Ä‡: first_name, last_name, film_count (alias), sortuj malejÄ…co.

use sakila;

select a.first_name,a.last_name,count(*) as film_count from actor a
inner join film_actor fa
on a.actor_id = fa.actor_id
inner join film f
on f.film_id = fa.film_id
group by a.actor_id
order by count(*) DESC
limit 10;


-- ğŸ§© T2: "Filmy bez kategorii"

-- WyÅ›wietl listÄ™ tytuÅ‚Ã³w filmÃ³w, ktÃ³re nie majÄ… przypisanej Å¼adnej kategorii.
-- (Czyli brak w film_category!)


select f.title,fc.category_id from film f
left join film_category fc
on f.film_id = fc.film_id
where fc.category_id is NULL;

-- ğŸ§© T3: "UÅ¼ytkownicy-widmo"

-- PokaÅ¼ klientÃ³w, ktÃ³rzy nigdy nic nie wypoÅ¼yczyli ani nie dokonali Å¼adnej pÅ‚atnoÅ›ci.
-- ZwrÃ³Ä‡: first_name, last_name, email


SELECT
    c.first_name,
    c.last_name,
    c.email
FROM customer c
LEFT JOIN rental r ON c.customer_id = r.customer_id
LEFT JOIN payment p ON c.customer_id = p.customer_id
WHERE r.rental_id IS NULL AND p.payment_id IS NULL;

-- ğŸ§© T4: "Self JOIN â€“ wspÃ³Å‚lokatorzy"

-- Wypisz pary klientÃ³w, ktÃ³rzy mieszkajÄ… na tym samym adresie (address_id).
-- ZwrÃ³Ä‡ client_1, client_2, address_id
-- Unikaj duplikatÃ³w (np. Janâ€“Anna i Annaâ€“Jan to to samo).
 
 select c1.first_name as client_1,c1.address_id,c2.first_name as client_2 from customer c1
 inner join customer c2
 on c1.address_id = c2.address_id
 where c1.first_name>c2.first_name;

-- ğŸ§© T5: "Cross JOIN â€“ lista losowaÅ„"

-- StwÃ³rz sztucznÄ… listÄ™: wszystkie moÅ¼liwe pary language Ã— category.
-- ZwrÃ³Ä‡ language_name, category_name.
-- Posortuj alfabetycznie.

select l.name,c.name from language l
cross join category c;